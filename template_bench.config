
{duration, minutes}.
% Duration of benchmark in minute. This can be specified in run.sh file.

{concurrent, 250}.
% Number of parallel worker on each Erlang node

{report_interval, report_interval_seconds}.
% How often, in seconds, the results should be simplified.

{erlange_nodes, [Here_put_VMs_names]}.
% Name of all nodes participate in the benchmark

{operations, [{spawning,spawn_percentage} , {remote_call,remote_call_percentage},{global_register,global_register_percentage}, {global_unregister,global_unregister_percentage}, {global_whereis,global_whereis_percentage},{local_register,local_register_percentage}, {local_unregister,local_unregister_percentage}, {local_whereis,local_whereis_percentage}]}.
% ratio of commands that will be used in the benchmark. These rates can be specified in run.sh file.

{sleep_time_after_ping, sleep_time_here}.
% sleep time in second. It gives a chance to the cluster of Erlang nodes to get a stable condition after nodes ping each other. It will be calculated in expriment.sh

{sleep_time_before_ping, 3}.
% sleep time in second. It is useful for large cluster. 3 seconds is an appropriate time to be sure DEbench is copied on all nodes in the cluster

{node_name, local_node_name}.
% local node name which will be determined in runtime.

{packet_size, 1000}.
% size of data, in byte, as a argument for RPC and spawn commands

{delay_remote_function, 250}.
% Specifies the amount of time, in microseconds, that function, which is called by RPC or spawn, should take

